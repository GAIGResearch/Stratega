name: Python Wheel Builds

on: [push, pull_request]
jobs:
  sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/docs') != true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Install requirements
        run: |
          pip install --user check-manifest twine
      - name: Run check-manifest
        run: |
          python -m check_manifest
      - name: Build sdist
        run: |
          python -m build --sdist --outdir wheelhouse
      - name: Install from sdist
        run: |
          pip install --user wheelhouse/*.tar.gz
      - name: Check sdist
        run: |
          python -m twine check wheelhouse/*
      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-latest
            cibw-arch: win_amd64
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86

    name: Wheels • ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: ${{ matrix.python-arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel twine
      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_ARCHS_MACOS=x86_64 arm64 universal2" >> $GITHUB_ENV
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT_COMMON" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_LINUX=$CIBW_ENVIRONMENT_COMMON PIP_ONLY_BINARY='numpy'" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_MACOS=$CIBW_ENVIRONMENT_COMMON MACOSX_DEPLOYMENT_TARGET=10.9 CMAKE_OSX_ARCHITECTURES=\"$CMAKE_OSX_ARCHITECTURES\"" >> $GITHUB_ENV
          CIBW_BEFORE_ALL_COMMON="cmake -S . -B build_dependencies $CMAKE_ARCH && cmake --build build_dependencies --target praat -j 2"
          echo "CIBW_BEFORE_ALL=$CIBW_BEFORE_ALL_COMMON" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_WINDOWS=$CIBW_BEFORE_ALL_COMMON --config Release" >> $GITHUB_ENV
      - name: Only build ReadTheDocs wheel
        if: startsWith(github.ref, 'refs/heads/docs')
        shell: bash
        run: |
          echo "CIBW_BUILD=cp37-manylinux_x86_64" >> $GITHUB_ENV
      - name: Run cibuildwheel
        if: startsWith(github.ref, 'refs/heads/docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          cibuildwheel
      - name: Check built wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          twine check wheelhouse/*
      - name: Upload built wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/stratega-*.whl
          if-no-files-found: error

      - name: Upload wheel for ReadTheDocs
        if: runner.os == 'Linux' && matrix.cibw-arch == 'manylinux_x86_64' && startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
        uses: actions/upload-artifact@v2
        with:
          name: rtd-wheel
          path: wheelhouse/stratega-*-cp37-cp37m-*manylinux2010_x86_64*.whl
          if-no-files-found: error

 

  pypi:
    name: Upload to PyPI
    needs: [sdist, wheels]
    runs-on: ubuntu-20.04
    # upload pypi wheels if commit is tagged with "pypi"
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/pypi.')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PIPSTRATEGASECRET }}
          verbose: true
