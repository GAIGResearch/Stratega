name: Python Wheel Builds

on: [push, pull_request]
env:
    CIBW_SKIP: pp37-win_amd64 pp37-macosx_x86_64 pp37-manylinux_x86_64 cp37-macosx_x86_64 cp310-macosx_x86_64 cp38-macosx_x86_64 cp39-macosx_x86_64 cp39-win_amd64 cp39-win32 cp38-win_amd64 cp38-win32 cp37-win_amd64 cp39-manylinux_x86_64 cp39-manylinux_i686 cp38-manylinux_x86_64 cp38-manylinux_i686 cp37-win32 cp37-manylinux_x86_64 cp37-manylinux_i686
jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_i686
          - runs-on: macos-latest
            cibw-arch: macosx_x86_64
          - runs-on: windows-latest
            cibw-arch: win_amd64
          - runs-on: windows-latest
            cibw-arch: win32
            python-arch: x86

    name: Wheels • ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: ${{ matrix.python-arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel twine

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev


    - name: Install Android Components
      if: matrix.platform.name == 'Android'
      run: |
        echo "y" | /usr/local/lib/android/sdk/tools/bin/sdkmanager --install "cmake;3.10.2.4988404" --sdk_root=ANDROID_SDK_ROOT
        sudo ln -sf /usr/local/lib/android/sdk/cmake/3.10.2.4988404/bin/cmake /usr/bin/cmake
        wget -nv https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip -P $GITHUB_WORKSPACE
        unzip -qq -d $GITHUB_WORKSPACE android-ndk-r18b-linux-x86_64.zip
    - name: Configure CMake
      shell: bash
      run: cmake -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install -DSFML_BUILD_EXAMPLES=TRUE -DCMAKE_VERBOSE_MAKEFILE=ON -DSFML_BUILD_TEST_SUITE=TRUE ${{matrix.platform.flags}} ${{matrix.config.flags}}

    - name: Build
      shell: bash
      run: cmake --build $GITHUB_WORKSPACE/build --config Release --target install

      
      - name: Install Linux C++20
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y gcc-10 g++-10

      - name: Configure Linux CMake Test
        if: runner.os == 'Linux'
        shell: bash
        run: cmake -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build2 -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build Linux Test
        if: runner.os == 'Linux'
        shell: bash
        run: cmake --build $GITHUB_WORKSPACE/build2 --config Release --target install

      - name: Configure cibuildwheel
        shell: bash
        run: |
          CMAKE_ARCH="${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}"
          CMAKE_OSX_ARCHITECTURES=${{ matrix.cibw-arch == 'macosx_x86_64' && 'x86_64' || matrix.cibw-arch == 'macosx_arm64' && 'arm64' || matrix.cibw-arch == 'macosx_universal2' && '"arm64;x86_64"' || '' }}
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          CIBW_ENVIRONMENT_COMMON=""
          echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT_COMMON" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_LINUX=$CIBW_ENVIRONMENT_COMMON  PIP_ONLY_BINARY='numpy' ">> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_MACOS=$CIBW_ENVIRONMENT_COMMON MACOSX_DEPLOYMENT_TARGET=10.15 CMAKE_OSX_ARCHITECTURES=\"$CMAKE_OSX_ARCHITECTURES\"" >> $GITHUB_ENV
          CIBW_BEFORE_ALL_COMMON=""
          echo "CIBW_BEFORE_ALL=$CIBW_BEFORE_ALL_COMMON" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_MACOS=$CIBW_BEFORE_ALL_COMMON cmake -S . -B build_dependencies  -DCMAKE_VERBOSE_MAKEFILE=ON $CMAKE_ARCH  && cmake --build build_dependencies  --config Release --target stratega -j 2" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_WINDOWS=$CIBW_BEFORE_ALL_COMMON cmake -S . -B build_dependencies  -DCMAKE_VERBOSE_MAKEFILE=ON $CMAKE_ARCH  && cmake --build build_dependencies  --config Release --target stratega -j 2" >> $GITHUB_ENV
          echo "CIBW_BEFORE_BUILD_LINUX=$CIBW_BEFORE_ALL_COMMON cmake -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build2 -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install -DCMAKE_VERBOSE_MAKEFILE=ON $CMAKE_ARCH  && cmake --build $GITHUB_WORKSPACE/build2  --config Release --target install " >> $GITHUB_ENV   
      
      - name: Run cibuildwheel
        if: startsWith(github.ref, 'refs/heads/docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          cibuildwheel

      - name: Check built wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true || matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          twine check wheelhouse/*

      - name: Upload built wheels
        if: startsWith(github.ref, 'refs/heads/docs') != true
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Upload wheel for ReadTheDocs
        if: runner.os == 'Linux' && matrix.cibw-arch == 'manylinux_x86_64' && startsWith(github.ref, 'refs/heads/') && !startsWith(github.ref, 'refs/heads/actions')
        uses: actions/upload-artifact@v2
        with:
          name: rtd-wheel
          path: wheelhouse/stratega-*-cp37-cp37m-*manylinux2010_x86_64*.whl
          if-no-files-found: error

 

  pypi:
    name: Upload to PyPI
    needs: [build_sdist, wheels]
    runs-on: ubuntu-20.04
    # upload pypi wheels if commit is tagged with "pypi"
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/pypi.')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PIPSTRATEGASECRET }}
          verbose: true
